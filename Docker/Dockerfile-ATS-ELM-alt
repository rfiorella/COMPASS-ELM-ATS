# builds ATS, failing if tests do not pass
#
# Note this should not be
# used in CI -- it is more for creating containers for short courses,
# etc, where the container is manually pushed, as opposed to CI which
# first pushes the container and then runs tests.
#
# Note, the branch arguments are:
# - if a branch name is passed, it will be checked out and forced to the
#   tip of that branch on origin
# - if the branch name is empty, the default submodule hash will be used
#
# The former is preferred in development, but the latter should be
# done to confirm that the submodule will work for users


FROM ubuntu:jammy as tpls

# MPI flavor (mpich|openmpi)
ARG build_mpi=True
ARG mpi_flavor=mpich
ARG mpi_version=4.0.3

# Set timezone:
RUN ln -snf /usr/share/zoneinfo/$CONTAINER_TIMEZONE /etc/localtime && echo $CONTAINER_TIMEZONE > /etc/timezone

RUN apt-get -q update -y && apt-get install -y tzdata && apt-get -q install -y \
  apt-utils \
#  cmake \
  curl \
  libcurl4-openssl-dev \
  emacs \
  gedit \
  g++ \
  gfortran \
  git \
  groff \
  libblas-dev \
  liblapacke-dev \
  liblapack-dev \
#  lib${mpi_flavor}-dev \
  libssl-dev \
  m4 \
  make \
  openssl \
  python3 \
  python3-distutils \
  python3-pip \
  python-is-python3 \
  rsync \
  wget \
  vim \
  zlib1g-dev \
  && apt-get clean \
  && rm -rf /var/lib/apt/lists/*

# Note this installs numpy as well
RUN pip3 install --no-cache-dir --upgrade pip && \
    pip3 install --no-cache-dir install h5py

# install MPI - if mpich, custom compile; if openmpi, install precompiled binary
RUN if [ "$build_mpi" = "True" ]; then \
      if [ "$mpi_flavor" = "mpich" ]; then cd / \
        && wget https://www.mpich.org/static/downloads/${mpi_version}/mpich-${mpi_version}.tar.gz \
        && tar xvf mpich-${mpi_version}.tar.gz \
        && cd mpich-${mpi_version} \
        && FFLAGS="-fallow-argument-mismatch" FCFLAGS="-fallow-argument-mismatch" ./configure --enable-shared --with-device=ch3:sock --enable-fast=all,Os --prefix=/usr \
        && make \
        && make install \
        && cd ../ \
        && rm -r mpich-${mpi_version}/ \
        && rm mpich-${mpi_version}.tar.gz ; \
      elif [ "$mpi_flavor" = "openmpi" ]; then cd / \
        && export mpi_version_major=`echo ${mpi_version} | cut -c1-3` && echo $mpi_version_major \
        && wget https://download.open-mpi.org/release/open-mpi/v${mpi_version_major}/openmpi-${mpi_version}.tar.gz \
        && tar xvf openmpi-${mpi_version}.tar.gz \
        && cd openmpi-${mpi_version} \
        && FFLAGS="-fallow-argument-mismatch" FCFLAGS="-fallow-argument-mismatch" ./configure --enable-shared --prefix=/usr \
        && make \
        && make install \
        && cd ../ \
        && rm -r openmpi-${mpi_version}/ \
        && rm openmpi-${mpi_version}.tar.gz ; \
      else \
        echo "Unknown mpi_flavor - exiting." \
        && exit 1 ; \
      fi \
    else apt-get install -y lib${mpi_flavor}-dev ; fi

# Versions change and we cannot set environment variables from command output.
ARG petsc_ver
ARG trilinos_ver
ARG amanzi_branch=master

# Installation paths
ENV AMANZI_PREFIX=/home/amanzi_user/install \
    AMANZI_INSTALL_DIR=/home/amanzi_user/install/amanzi \
    AMANZI_TPLS_DIR=/home/amanzi_user/install/tpls

# TPL versions needed for LD_LIBRARY_PATH
ENV AMANZI_PETSC_LIBS=$AMANZI_TPLS_DIR/petsc-${petsc_ver}/lib \
    AMANZI_TRILINOS_LIBS=$AMANZI_TPLS_DIR/trilinos-${trilinos_ver}/lib \
    AMANZI_SEACAS_LIBS=$AMANZI_TPLS_DIR/SEACAS/lib

# Add an unprivileged user and group: amanzi_user, amanzi_user
RUN groupadd -r amanzi_user \
  && useradd -r -K UMASK=0022 -K HOME_MODE=0755 -m -g amanzi_user amanzi_user
USER amanzi_user

COPY --chown="amanzi_user:amanzi_user" amanzi/ /home/amanzi_user/amanzi

# Set the current working directory as the users home directory
# (creates teh directory if it doesn't exist)
WORKDIR /home/amanzi_user/amanzi

# ENV https_proxy=proxyout.lanl.gov:8080 \
#     http_proxy=proxyout.lanl.gov:8080

# Build and install the TPLs using bootstrap.sh, and remove
# the source, objects, etc. after installation to save space.
RUN ./bootstrap.sh --prefix=${AMANZI_PREFIX} \
  --parallel=4 --opt \
  --amanzi-build-dir=/home/amanzi_user/amanzi_builddir/amanzi \
  --tpl-build-dir=/home/amanzi_user/amanzi_builddir/tpls \
  --tpl-download-dir=/home/amanzi_user/amanzi_builddir/tpls/Downloads \
  --disable-build_amanzi --disable-build_user_guide \
  --enable-shared --enable-structured --enable-silo \
  --enable-alquimia --enable-pflotran --enable-crunchtope \
  --enable-pf_clm \
  --with-mpi=/usr \
  --with-python=/usr/bin/python \
  && rm -r /home/amanzi_user/amanzi_builddir \
  && rm -r /home/amanzi_user/amanzi/build/tools/ \
  && cd /home/amanzi_user/install \
  && find . -type f -name '*.pdf' -exec rm {} \; \
  && find . -type f -name '*.png' -exec rm {} \; \
  && find . -type f -name '*.html' -exec rm {} \;

# Set the LD_LIBRARY_PATH for Amanzi builds in the next stage
ENV LD_LIBRARY_PATH=${AMANZI_TPLS_DIR}/lib:${AMANZI_PETSC_LIBS}:${AMANZI_TRILINOS_LIBS}:${AMANZI_SEACAS_LIBS}
RUN echo $LD_LIBRARY_PATH

# Set path to pick up any tools installed during bootstrap
ENV PATH=/home/amanzi_user/amanzi/install/tools/bin:${PATH}
RUN echo $PATH

FROM tpls as build-ats

RUN ./bootstrap.sh --prefix=${AMANZI_PREFIX} \
   --amanzi-build-dir=/home/amanzi_user/amanzi_builddir/ats \
   --tpl-config-file=${AMANZI_TPLS_DIR}/share/cmake/amanzi-tpl-config.cmake \
   --parallel=4 \
   --opt \
   --with-mpi=/usr \
   --enable-shared \
   --disable-structured \
   --disable-build_user_guide \
   --enable-geochemistry \
   --disable-amanzi_physics \
   --enable-ats_physics \
   --ats_dev \
   --enable-reg_tests \
   --enable-test_suite

# Set path to make it easier to run amanzi
ENV PATH=/home/amanzi_user/install/bin:${PATH}
RUN echo $PATH

# Create mount point for work on the host
RUN mkdir /home/amanzi_user/work \
    && mkdir /home/amanzi_user/.cime

# Unset proxy
ENV https_proxy= \
    http_proxy=

FROM build-ats as build-e3sm

# Copy E3SM into container
ADD --chown="amanzi_user:amanzi_user" E3SM /home/amanzi_user/E3SM
COPY --chown="amanzi_user:amanzi_user" cime_files/* /home/amanzi_user/.cime/
ADD --chown="amanzi_user:amanzi_user" scripts/ /home/amanzi_user/scripts

# need a version of python 8 currently for this version of cime
USER root
RUN apt-get -q update -y && apt-get install -y \
    libxml2 \
    libxml2-dev \
    libxml2-utils \
    libxml-libxml-perl \
    subversion \
    csh \
    && apt-get clean all \
    && mv /bin/sh /bin/sh.orig \
    && ln -s /bin/bash /bin/sh \
    && wget https://www.python.org/ftp/python/3.8.18/Python-3.8.18.tgz \
    && tar xvf Python-3.8.18.tgz \
    && cd Python-3.8.18 \
    && ./configure && make && make install \
    && cd ../ && rm -r Python-3.8.18* \
    && ln -fs /opt/Python-3.8.18/Python /usr/bin/python \
    # need to make each of these directories explicitly because RUN uses
    # /bin/sh and so brace expansion is not available:
    && cd /home/amanzi_user \
    && mkdir -p work/inputdata \
    && mkdir -p work/cases \
    && mkdir -p work/output \
    && chown -R amanzi_user:amanzi_user work

USER amanzi_user

ENV CASE_NAME=/home/amanzi_user/work/output/f19_g16.IGSWELMBGC \
    USER=amanzi_user \
    CIMEROOT=/home/amanzi_user/E3SM/cime \
    PYTHONPATH=/home/amanzi_user/E3SM/cime/scripts/Tools:/home/amanzi_user/E3SM/cime/scripts/lib:$PYTHONPATH \
    CIME_MODEL=e3sm \
    ATS_DIR=/home/amanzi_user/install/

 RUN cd /home/amanzi_user/E3SM/cime/scripts \
     && ./create_newcase --case ${CASE_NAME} --res f19_g16 --compset IGSWELMBGC --mach docker-ats --compiler gnu \
     && cd ${CASE_NAME} \
     && ./xmlchange DATM_CLMNCEP_YR_END=1995 \
     && ./xmlchange PIO_TYPENAME=netcdf \
     && ./xmlchange RUNDIR=${PWD}/run \
     && ./xmlchange EXEROOT=${PWD}/bld \
     && ./xmlchange NTASKS=1 \
     && ./xmlchange DIN_LOC_ROOT=$PWD \
     && ./case.setup
#      && ./case.build
